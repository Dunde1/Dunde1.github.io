{"version":3,"sources":["Components/Pages/Main/MainContents.tsx","Components/Pages/Main/MainSearch.tsx","Components/Pages/Main/Main.tsx","Components/Pages/Posts/common/MainLink.tsx","Components/Pages/Posts/CSS3D/CSS3D.tsx","Components/Pages/Posts/LoadingRings/LoadingRings.tsx","Components/Pages/PageRouter/PageRouter.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["posts","atom","key","default","pageInfo","MainContents","postPages","useRecoilValue","className","map","v","to","name","style","backgroundImage","thumbnail","color","options","textColor","fontSize","textSize","borderColor","tag","t","join","MainSearchInput","timer","setPostPages","useSetRecoilState","type","onInput","e","clearTimeout","setTimeout","searchText","parsingTexts","replace","split","filter","text","length","newPostPages","page","findIndex","includes","searchAlgorism","target","value","MainSearch","onClick","alert","src","width","height","alt","Main","MainLink","mode","CSS3D","href","LoadingRings","PageRouter","POST_PATH","path","element","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b183a7b.chunk.js","sourcesContent":["import { Link } from 'react-router-dom';\r\nimport { atom, useRecoilValue } from 'recoil';\r\nimport pageInfo from './pageInfo.json';\r\n\r\nexport const posts = atom({ key: 'pageInfo', default: pageInfo });\r\n\r\nconst MainContents = () => {\r\n  const postPages = useRecoilValue(posts);\r\n\r\n  return (\r\n    <section className=\"Main-contents\">\r\n      {postPages.map((v) => (\r\n        <Link className=\"content box-outter\" to={`/posts/${v.name}`} key={v.name} style={{ backgroundImage: `url(\"Main/${v.thumbnail}\")` }}>\r\n          <span className=\"post-name\" style={{ color: v.options.textColor, fontSize: v.options.textSize }}>\r\n            {v.name}\r\n          </span>\r\n          <span className=\"post-tag\" style={{ borderColor: v.options.textColor, color: v.options.textColor }}>\r\n            {v.tag.map((t) => `${t}`).join(', ')}\r\n          </span>\r\n        </Link>\r\n      ))}\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default MainContents;\r\n","import { useSetRecoilState } from 'recoil';\r\nimport { posts } from './MainContents';\r\nimport pageInfo from './pageInfo.json';\r\n\r\nconst MainSearchInput = ({}) => {\r\n  const setPostPages = useSetRecoilState(posts);\r\n\r\n  const searchAlgorism = (searchText: string) => {\r\n    const parsingTexts = searchText\r\n      .replace(',', '')\r\n      .split(' ')\r\n      .filter((text) => text !== '');\r\n\r\n    if (parsingTexts.length === 0) {\r\n      setPostPages(pageInfo);\r\n      return;\r\n    }\r\n\r\n    const newPostPages = pageInfo.filter((page) => {\r\n      if (\r\n        parsingTexts.findIndex((text) => {\r\n          if (page.name.includes(text)) return true;\r\n          if (page.tag.filter((tag) => tag.includes(text)).length !== 0) return true;\r\n          return false;\r\n        }) !== -1\r\n      )\r\n        return true;\r\n    });\r\n\r\n    setPostPages(newPostPages);\r\n  };\r\n\r\n  let timer: NodeJS.Timeout;\r\n\r\n  const onInput = (e: any) => {\r\n    const WAITING_TIME = 500;\r\n\r\n    clearTimeout(timer);\r\n\r\n    timer = setTimeout(() => {\r\n      searchAlgorism(e.target.value);\r\n    }, WAITING_TIME);\r\n  };\r\n\r\n  return <input className=\"search-input\" type=\"text\" onInput={onInput} />;\r\n};\r\n\r\nconst MainSearch = () => {\r\n  return (\r\n    <div className=\"Main-search box-outter\">\r\n      <button\r\n        className=\"search-button\"\r\n        onClick={() => {\r\n          alert('not yet');\r\n        }}\r\n      >\r\n        <img src=\"/icons/search.svg\" width=\"20px\" height=\"20px\" alt=\"search button\" />\r\n      </button>\r\n      <MainSearchInput />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MainSearch;\r\n","import MainContents from './MainContents';\r\nimport MainSearch from './MainSearch';\r\nimport './Main.css';\r\n\r\nconst Main = () => {\r\n  return (\r\n    <div className=\"Main\">\r\n      <section className=\"Main-header\">\r\n        <img className=\"Main-image box-outter\" src=\"/main.png\" alt=\"main hero\" />\r\n        <MainSearch />\r\n      </section>\r\n      <MainContents />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Main;\r\n","import { Link } from 'react-router-dom';\r\nimport './MainLink.css';\r\n\r\nconst MainLink = ({ mode }: { mode: 'dark' | 'bright' }) => {\r\n  return (\r\n    <Link className={`go-main ${mode}`} to={'/'}>\r\n      <img src={`/icons/back-arrow-${mode}.svg`} alt={'go main'} />\r\n    </Link>\r\n  );\r\n};\r\nexport default MainLink;\r\n","import React from 'react';\r\nimport MainLink from '../common/MainLink';\r\nimport './CSS3D.css';\r\n\r\nconst CSS3D = () => {\r\n  return (\r\n    <section className=\"css3d\">\r\n      <MainLink mode={'dark'} />\r\n      <div className=\"cube\">\r\n        <div className=\"top\">\r\n          <a className=\"go-youtube-btn\" href=\"https://www.youtube.com/watch?v=nOdDtnHWaDo\" target={'_blank'}>\r\n            Go to youtube source!\r\n          </a>\r\n        </div>\r\n        <div>\r\n          <span style={{ '--i': 0 } as React.CSSProperties}></span>\r\n          <span style={{ '--i': 1 } as React.CSSProperties}></span>\r\n          <span style={{ '--i': 2 } as React.CSSProperties}></span>\r\n          <span style={{ '--i': 3 } as React.CSSProperties}></span>\r\n        </div>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default CSS3D;\r\n","import MainLink from '../common/MainLink';\r\nimport './LoadingRings.css';\r\n\r\nconst LoadingRings = () => {\r\n  return (\r\n    <section className=\"loading-rings\">\r\n      <MainLink mode={'dark'} />\r\n      <a className=\"go-to-youtube\" href=\"https://www.youtube.com/watch?v=1Aq9OJuS3ok\" target={'_blank'}>\r\n        Go to youtube source!\r\n      </a>\r\n      <div className=\"container\">\r\n        <div className=\"ring\"></div>\r\n        <div className=\"ring\"></div>\r\n        <div className=\"ring\"></div>\r\n        <div className=\"ring\"></div>\r\n        <div className=\"ring\"></div>\r\n        <p>Loading...</p>\r\n      </div>\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default LoadingRings;\r\n","import { Route, Routes } from 'react-router-dom';\r\nimport CSS3D from '../Posts/CSS3D/CSS3D';\r\nimport LoadingRings from '../Posts/LoadingRings/LoadingRings';\r\n\r\nconst PageRouter = () => {\r\n  const POST_PATH = '/posts';\r\n\r\n  return (\r\n    <Routes>\r\n      <Route path={`${POST_PATH}/css3d`} element={<CSS3D />} />\r\n      <Route path={`${POST_PATH}/loading-rings`} element={<LoadingRings />} />\r\n    </Routes>\r\n  );\r\n};\r\n\r\nexport default PageRouter;\r\n","import { BrowserRouter, Routes, Route } from 'react-router-dom';\r\nimport { RecoilRoot } from 'recoil';\r\nimport './App.css';\r\nimport Main from './Components/Pages/Main/Main';\r\nimport PageRouter from './Components/Pages/PageRouter/PageRouter';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <RecoilRoot>\r\n        <BrowserRouter>\r\n          <Routes>\r\n            <Route path=\"/\" element={<Main />} />\r\n          </Routes>\r\n          <PageRouter />\r\n        </BrowserRouter>\r\n      </RecoilRoot>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nreportWebVitals();\r\n"],"sourceRoot":""}